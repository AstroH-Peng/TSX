#!usr/bin/env python
# -*- coding: utf-8 -*-
#Modified date: 14/06/2016
#Nima 
#

import numpy as np
import scipy as sp

import PyKEP as pk

import config
import trajectory_parser
import propagator

class Builder:
    """Class computing the trajectory propagation of a given Spacecraft

    Attributes defined here:
    -time_step: time step between two propagation
    -step_number: number of propagation points to get

    Methods defined here:
    -compute_traj(): computes the trajectory propagation.

    """
    def __init__(self):
        """Constructor of the class Builder."""
        self.time_step = config.time_step
        self.step_number = config.step_number
    def __repr__(self):
        """Method displaying a customized message when an instance of the 
        class BaseModel is called in the command line.
        """
        return "Builder: time_step = '{}', step_number = '{}'".format(
        self.time_step, self.step_number)
    def compute_traj(self):
        """Computes the trajectory propagation of the spacecraft for a 
        given step_number. 
        Returns a tuple: epoch, position vector, velocity vector.
        """
        host_traj = trajectory_parser.TrajParser()
        pg = propagator.Propagator()
        #cd = Coordinate()
  
        with open(config.input_dir + config.host_trajectory_file) as input_file:
            t, p, v = host_traj.parse_traj(input_file)

        time_step = self.time_step * pk.DAY2SEC
        pos_vel = np.append(p, v)
        values = [np.append(t.mjd2000, pos_vel)]
        #print "t_mjd2000: ", t.mjd2000
        #print "t_mjd: ", t.mjd
        t = t.mjd2000 * pk.DAY2SEC
        #print "t: ", t
        #time_range = [t + time_step*i for i in xrange(self.step_number)]
        for i in xrange(self.step_number):
            time = t + time_step #* i
            print "time: ", time
            h, cmp_pos_vel = pg.rkf45(time, values[i][1:7], time_step)
            values.append(np.append(time*pk.SEC2DAY, cmp_pos_vel))
            time_step = h
        return values
        #for i, time in enumerate(time_range):
            #cmp_pos_vel = pg.rk4(time, values[i][1:7], time_step)
            #values.append(np.append(time*pk.SEC2DAY, cmp_pos_vel))
        #return values
        #return cd.accumulator(values, time_step, time_range)

class Coordinate:
    """Class accumulating the trajectory.

    """
    def accumulator(self, values, time_step, time_range):
        """Method accumulating Spacecraft trajectories."""
        pg = propagator.Propagator()
        for i, time in enumerate(time_range):
            #values.append(np.append(time*pk.SEC2DAY, pg.rk4(time, values[i][1:7], time_step)))
            h, cmp_pos_vel = pg.rkf45(time, values[i][1:7], time_step)
            values.append(np.append(time*pk.SEC2DAY, cmp_pos_vel))
            time_step = h
        return values
	

